# -*- coding: utf-8 -*-
"""
Created on Sat Sep 11 13:48:47 2021

@author: jonat
"""

"""
This version gives a specific time to the player to type a maximum of words.
"""


"""
To do:
    - delete red flashes
    - highlight the current word
"""

from requests import get
from bs4 import BeautifulSoup
import tkinter as tk
from time import time

timeLimit = 30
elapsedTime = 0
started = False

#Window in which the game is played
window = tk.Tk()

#StringVar of the text to type
randomTextStringVar = tk.StringVar(window)

#Label for the text to type
textLabel = tk.Label(window,textvariable = randomTextStringVar, wraplength = 800)

#Entry where the player types
entry = tk.Entry(window, justify = "center")

#StringVar of the statistics of the player
statsStringVar = tk.StringVar(window)

#Label for the statistics of the player
statsLabel = tk.Label(window, textvariable = statsStringVar)

#StringVar for chronometer
chronoStringVar = tk.StringVar(window, value = 'Time limit : ' + str(timeLimit))

#Label for chronometer
chronoLabel = tk.Label(window, textvariable = chronoStringVar)


def newGame():
    #Function launching a new game
    global errorsCounter, randomText, randomTextStringVar, entry, t1, textList, word, chronoStringVar, entry
    url = "http://www.randomtextgenerator.com"
    html = get(url)
    soup = BeautifulSoup(html.text,"html.parser")
    
    randomText = soup.find('textarea').get_text().replace('\n','').replace('\r','').replace('.','') #This variable holds the text generated by the site
    
    #The next lines allows us to limit the size of the text while keeping the last word complete
    n = 20*timeLimit
    char = randomText[n]
    
    while char != ' ':
        char = randomText[n]
        n += 1
        
    randomText = randomText[:n]
    randomText = randomText.lower() #getting rid of upper cases to simplify typing
    textList = randomText.split(' ') #creating a list of every words of the sentence, for the future comparisons
    word = 0 #index of the word the player currently is at
    
    #Changing the text in the window
    randomTextStringVar.set(randomText)
    
    #Emptying the entry and the statistics display
    entry['state'] = 'normal'
    entry.delete(0, 'end')
    
    statsStringVar.set('\n\n\n\n\n\n\n\n\n')
    
    #Resetting the errors counter
    errorsCounter = 0
    
    #Resetting the chronometer
    chronoStringVar.set("Time limit : " + str(timeLimit))
    
    #Starting the comparison between the text and the input of the player
    compare()

def compare():
    #This function compares the content of the entry to the text in order to indicate errors
    global errorsCounter, textList, word, started, t1
    
    txt = entry.get()
    
    if started == False:
        #As long as the player hasn't begun typing, the chronometer doesn't start
        if txt != '':
            t1 = time()
            started = True
            chronoLabel.after(2, compare)
        else:
            chronoLabel.after(2, compare)
    else:
        t2 = time()
        elapsedTime = int(t2 - t1)
        
        chronoStringVar.set("Time limit : " + str(timeLimit - elapsedTime)) #Updating the chronometer
        
        if len(txt) >0 and txt[-1] == ' ':
            #When the player types " " it validates the current word and triggers a comparison with the current word
            if textList[word] != txt[:len(txt)-1]:
                errorsCounter += 1
            #The entry is cleaned
            entry['state'] = 'normal'
            entry.delete(0, 'end')
            word += 1
        
        if txt != textList[word][:len(txt)]:
            #If what the player is typing is wrong, we indicating it by passing the background of the entry in red
            entry['bg'] = 'red'
        
        else:
            entry['bg'] = 'white'
            
        if elapsedTime >= timeLimit:
            #When the chronometer reaches the end we enable the entry and display scores
            entry['state'] = 'disabled'
            
            chronoStringVar.set('')
            
            score = int(word/timeLimit*60)
            
            #Getting the top 3 highscores from the file holding them
            try :
                scoreFile = open('highscorev2.txt','r')
            except:
                scoreFile = open('highscorev2.txt','w')
                scoreFile.close()
                scoreFile = open('highscorev2.txt','r')
            
            scores = scoreFile.readlines()
            
            scoreFile.close()
            
            #Converting strings to int scores
            for i in range(len(scores)):
                scores[i].replace('\n','')
                scores[i] = int(scores[i]) 
             
            newHighScore = False #Variable saying if the player has reached a new highscore
            if len(scores) == 0 or score > scores[-1] or len(scores) < 3:
                #If the new score is at least better than the worst score of the top, we put it in the top
                newHighScore = True
                scores.append(score)
                scores.sort(reverse = True)
                
                if len(scores)>3:
                    #Checking whether 3 scores or less were saved as only 3 can be saved
                    del(scores[-1])
                
                scoreFile = open('highscorev2.txt','w')
                scoreFile.truncate(0)
                
                for scr in scores:
                    #Writing the new top
                    scoreFile.write(str(scr) + '\n')
                    
                scoreFile.close()
            
            #Displaying the top and statistics of the player
            string = 'Top ' + str(len(scores)) + '\n\n'
            for i in range(len(scores)):
                string += str(i+1) + '. ' + str(scores[i]) + '\n'
            if newHighScore:
                statsStringVar.set('Average words/min = ' + str(score) + '\nErrors : ' + str(errorsCounter) + '\n\n\nNew highscore !\n\n' + string)
            else:
                statsStringVar.set('Average words/min = ' + str(score) + '\nErrors : ' + str(errorsCounter) + '\n\n\n' + string)
                  
        
        else:
            chronoLabel.after(2, compare)
        
    
newGame()    

#Placing the different elements
window.geometry('1200x500')
window.resizable(False,False)
window.grid_columnconfigure(0, weight=1)

textLabel.grid(pady = 20)

entry.grid(pady = 20, sticky = tk.EW)

statsLabel.grid(pady = 20)

chronoLabel.grid(pady = 20)

retryButton = tk.Button(window,text = 'Retry',command = newGame)
retryButton.grid(ipadx = 10,pady = 20)

window.mainloop()